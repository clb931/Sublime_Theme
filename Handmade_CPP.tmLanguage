<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>C++</string>
	<key>patterns</key>
	<array>
		<!-- Keywords -->
		<dict>
			<key>name</key>
			<string>keyword.control.c</string>
			<key>match</key>
			<string>\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>keyword.operator.sizeof.c</string>
			<key>match</key>
			<string>\b(sizeof)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>keyword.control.c++</string>
			<key>match</key>
			<string>\b(catch|delete|namespace|new|operator|throw|try|using)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>keyword.operator.c++</string>
			<key>match</key>
			<string>\b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|this|typeid|xor|xor_eq)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>keyword.operator.cast.c++</string>
			<key>match</key>
			<string>\b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>keyword.other.c++</string>
			<key>match</key>
			<string>\b(alignas|alignof|char16_t|char32_t|concept|constexpr|decltype|final|noexcept|override|requires|static_assert|thread_local)\b</string>
		</dict>

		<!-- Storage -->
		<dict>
			<key>name</key>
			<string>storage.type.c</string>
			<key>match</key>
			<string>\b(asm|auto|bool|char|double|enum|float|int|long|short|signed|struct|typedef|union|unsigned|void)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>storage.modifier.c</string>
			<key>match</key>
			<string>\b(const|extern|inline|register|static|volatile)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>storage.type.c++</string>
			<key>match</key>
			<string>\b(class|export|friend|typename|wchar_t)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>storage.type.template.c++</string>
			<key>match</key>
			<string>\b(template)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>storage.modifier.c++</string>
			<key>match</key>
			<string>\b(explicit|mutable|private|protected|public|virtual)\b</string>
		</dict>

		<!-- Constants -->
		<dict>
			<key>name</key>
			<string>constant.language.c</string>
			<key>match</key>
			<string>\b(NULL|true|false)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>constant.numeric.c</string>
			<key>match</key>
			<string>\b([0-9]*\.?[0-9]+f?)\b</string>
		</dict>
		<dict>
			<key>name</key>
			<string>constant.language.c++</string>
			<key>match</key>
			<string>\b(nullptr)\b</string>
		</dict>

		<!-- String -->
		<dict>
			<key>name</key>
			<string>string.quoted.double.c</string>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>name</key>
			<string>string.quoted.single.c</string>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>

		<!-- Comments -->
		<dict>
			<key>name</key>
			<string>comment.block.c</string>
			<key>begin</key>
			<string>\/\*</string>
			<key>end</key>
			<string>\*\/</string>
		</dict>
		<dict>
			<key>name</key>
			<string>comment.line.double-slash.c</string>
			<key>match</key>
			<string>\/\/.*</string>
		</dict>

		<!-- Preprocessor -->
		<dict>
			<key>name</key>
			<string>meta.preprocessor.c</string>
			<key>begin</key>
			<string>(#)\b(?:(if|elif|else|endif|ifdef|ifndef|defined|undef|line|pragma)|(include)|(define)|(error))\b\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c meta.preprocessor.macro.begin.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c keyword.control.import.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.c.include keyword.control.import.include.c</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.macro.c keyword.control.import.define.c</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.diagnostic.c keyword.control.import.error.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\w*(?:\(.*\))?)?(".*"|'.*'|&lt;.*&gt;)?</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.quoted.other.c</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#simple_string</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>simple_string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>string.quoted.other.c</string>
					<key>match</key>
					<string>(".*"|'.*'|&lt;.*&gt;)</string>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.character.escape.c</string>
					<key>match</key>
					<string>\\(['"?\\abfnrtv]|[X](?:[a-fA-F0-9])+|[u](?:[a-fA-F0-9]){1,4}|[U](?:[a-fA-F0-9]){1,8}|(?:[0-7]){1,3})</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
					<key>match</key>
					<string>\\([\S])*</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>constant.other.placeholder.c</string>
					<key>match</key>
					<string>%([-+#0 ]?(?:[0-9]+|[*])?(?:\.(?:[0-9]+|[*]))?([h]{1,2}|[l]{1,2}|[jztL])?[diuoxXfFeEgGaAcspn]|%)</string>
				</dict>
				<dict>
					<key>name</key>
					<string>invalid.illegal.placeholder.c</string>
					<key>match</key>
					<string>%[\S]*</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c++</string>
	<key>uuid</key>
	<string>26251B18-6B1D-11D9-AFDB-000D93589AF6</string>
</dict>
</plist>
